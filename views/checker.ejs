<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Document</title>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/css/bootstrap.min.css"
    integrity="sha384-TX8t27EcRE3e/ihU7zmQxVncDAy5uIKz4rEkgIXeMed4M0jlfIDPvg6uqKI2xXr2" crossorigin="anonymous">
</head>

<body>
  <div class="d-flex justify-content-center align-items-center w-100 vh-50 mt-5">
    <div id="message"></div>
    <a class="btn-primary p-2" style="display: none;" href="" id="downloadBtn" download target="_blank">Download
      File</a>
  </div>
  </div>
  <div class="container">
    <table class="table mt-5" id="table">
      <thead>
        <tr>
          <th scope="col">#</th>
          <th scope="col">Domain</th>
          <th scope="col">Available</th>
        </tr>
      </thead>
      <tbody id="table-body">

      </tbody>
    </table>
  </div>
</body>
<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
<script>
  const form = document.getElementById("form");
  const submit = document.getElementById("submit");
  const message = document.getElementById("message");
  const table = document.getElementById("table-body");
  const domain = document.querySelector(".form-control");
  const downloadBtn = document.querySelector("#downloadBtn");
  let countDomain = 0;
  let availableDomains = "";
  let totalDomains = 0;

  // downloadBtn.addEventListener("click", async (e) => {
  //   let filename = downloadBtn.getAttribute("href");
  //   filename = filename.replace("/download/", "");
  //   const { data } = await axios.get(`/delete/${filename}`);
  //   console.log(data);
  // });

  let timeOut = 300;

  async function initApp() {
    const data = await axios.get("/domains");
    const text = data.data
    // console.log(data);
    const domains = text.split("\n");
    // console.log(domains.length);
    totalDomains = domains.length;
    domains.forEach((d, i) => {
      setTimeout(() => {
        let dos = d.split(".");
        if (dos[1] == "fr" || dos[2] == "fr") {
          timeOut = 7000;
        }
        getData(d, i + 1);
      }, i * timeOut)
      timeOut = 300;
    });
  }

  initApp();

  // async function getData(domain, count) {
  //   const res = await axios.get(`/check/${domain}`);
  //   console.log(res);
  //   if (res.data.status == "success") {
  //     countDomain++;
  //     console.log(countDomain)
  //   }
  // }

  async function getData(domain, count) {
    try {

      let dos = domain.split(".");

      if (dos.length < 2) {
        return table.insertAdjacentHTML("beforeend", `<tr class="bg-warning" >
          <td colspan="10">
            ${domain} is <strong>Some Error Occured while checking for domain</strong>
          </td>
        </tr>` )
        clearMessage();
      }


      message.innerHTML = `<p class="alert alert-success mt-5">Searching for domain</p>`;
      const { data } = await axios.get(`/check/${domain}`);

      if (data.status == "fail") {
        throw new Error(data.message);
      }

      countDomain++;

      table.insertAdjacentHTML("beforeend", getMessage(domain, data.isActive, count)
      );

      if (data.isActive) {
        availableDomains += `${data.domain}\n`;
      }

      if (countDomain == totalDomains) {
        clearMessage();
        console.log(availableDomains);
        downloadBtn.style.display = "block";
        const { data } = await axios({
          method: "POST",
          url: "/write",
          data: {
            domains: `${availableDomains}`
          }
        });
        console.log(data);
        downloadBtn.setAttribute("href", `${data.filename}`);
      }


    } catch (e) {
      table.insertAdjacentHTML("beforeend", `<tr class="bg-warning" >
          <td colspan="10">
            ${domain} is <strong>Some Error Occured while checking for domain</strong>
          </td>
        </tr>` );
      // console.log(e);
    }

  }

  function getMessage(domain, isActive, count) {
    if (isActive) { // true if true
      return `<tr class="bg-success">
        <td>${count}</td>
        <td>${domain}</td>
        <td><strong>Available</strong></td></tr>`
    } else {
      return `<tr class="bg-danger">
        <td>${count}</td>
        <td>${domain}</td>
        <td><strong>Unavailable</strong></td></tr>`
    }
  }

  function clearMessage() {
    return setTimeout(() => {
      message.innerHTML = null;
    }, 5000)
  }

</script>



</html>